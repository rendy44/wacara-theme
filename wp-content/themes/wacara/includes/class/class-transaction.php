<?php
/**
 * Class to handle all transaction related to transaction.
 *
 * @author  Rendy
 * @package Wacara
 */

namespace Skeleton;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

if ( ! class_exists( 'Skeleton\Transaction' ) ) {
	/**
	 * Class Transaction
	 *
	 * @package Skeleton
	 */
	class Transaction {

		/**
		 * Create customer.
		 *
		 * @param string $name             customer name.
		 * @param string $email            customer email address.
		 * @param string $stripe_source_id srtipe source id which generated by stripe.
		 *
		 * @return Result
		 */
		public static function save_customer( $name, $email, $stripe_source_id ) {
			$result               = new Result();
			$save_stripe_customer = Payment::create_customer( $name, $email, $stripe_source_id );
			if ( $save_stripe_customer->success ) {
				$save_local_customer = wp_insert_post(
					[
						'post_type'   => 'customer',
						'post_status' => 'publish',
						'post_title'  => $name,
						'post_name'   => sanitize_title( $name ),
					]
				);
				if ( ! is_wp_error( $save_local_customer ) ) {
					// Save all information into post meta.
					Helper::save_post_meta(
						$save_local_customer,
						[
							'email'              => $email,
							'stripe_source_id'   => $stripe_source_id,
							'stripe_customer_id' => $save_stripe_customer->callback,
						]
					);
					$result->success  = true;
					$result->callback = $save_stripe_customer->callback;
				} else {
					$result->message = $save_local_customer->get_error_message();
				}
			} else {
				$result->message = $save_stripe_customer->message;
			}

			return $result;
		}

		/**
		 * Find local customer id by email.
		 *
		 * @param string $email customer email.
		 *
		 * @return Result
		 */
		public static function find_local_customer_id_by_email( $email ) {
			global $wpdb;
			$result            = new Result();
			$table_name        = $wpdb->prefix . 'postmeta';
			$post_meta         = TEMP_PREFIX . 'email';
			$cache_key         = TEMP_PREFIX . 'customer_' . $email;
			$local_customer_id = wp_cache_get( $cache_key );
			if ( false === $local_customer_id ) {
				$local_customer_id = $wpdb->get_var( "SELECT post_id FROM {$table_name} WHERE meta_key = '{$post_meta}' AND meta_value = '{$email}' ORDER BY meta_id DESC LIMIT 1" ); // phpcs:ignore
				wp_cache_set( $cache_key, $local_customer_id );
			}

			if ( $local_customer_id ) {
				$result->callback = $local_customer_id;
				$result->success  = true;
			} else {
				$wpdb->hide_errors();
				$result->message = __( 'Customer not found', 'wacara' );
			}

			return $result;
		}

		/**
		 * Find stripe customer id by email.
		 *
		 * @param string $email customer email.
		 *
		 * @return Result
		 */
		public static function find_stripe_customer_id_by_email( $email ) {
			$result              = new Result();
			$find_local_customer = self::find_local_customer_id_by_email( $email );
			if ( $find_local_customer->success ) {
				$stripe_customer_id = Helper::get_post_meta( 'stripe_customer_id', $find_local_customer->callback );
				$result->success    = true;
				$result->callback   = $stripe_customer_id;
			} else {
				$result->message = $find_local_customer->message;
			}

			return $result;
		}
	}
}

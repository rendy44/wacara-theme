// Useful sass mixins

// Create liniear gradient
@mixin linearGradient($top, $bottom) {
  background: $top;
  background: -moz-linear-gradient(45deg, $top 0%, $top 0%, $bottom 100%);
  background: -webkit-gradient(left bottom, right top, color-stop(0%, $top), color-stop(0%, $top), color-stop(100%, $bottom));
  background: -webkit-linear-gradient(45deg, $top 0%, $top 0%, $bottom 100%);
  background: linear-gradient(45deg, $top 0%, $top 0%, $bottom 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#6b75ff", endColorstr="#59b7ff", GradientType=1);
}

@mixin gradient-bg($color_1: false, $color_2: false) {
  @if $color_1 {
    $color_1: $color_1;
  } @else {
    $color_1: $primary_color;
  }

  @if $color_2 {
    $color_2: $color_2;
  } @else {
    $color_2: $primary_alt_color;
  }
  @include linearGradient($color_1, $color_2);
}

@mixin gradient-color($color_1: false, $color_2: false) {
  @if $color_1 {
    $color_1: $color_1;
  } @else {
    $color_1: $primary_color;
  }

  @if $color_2 {
    $color_2: $color_2;
  } @else {
    $color_2: $primary_alt_color;
  }

  @include gradient-bg($color_1, $color_2);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

// Retina image
@mixin image-2x($image, $width, $height) {

  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width + px $height + px;
    background-size: $width / 10 + rem $height / 10 + rem;
  }
}

// Breakpoint media query
@mixin breakpoint($size) {
  @media (min-width: $size + px) {
    @content;
  }
}

// Rounded corner
@mixin border-radius($size) {
  -webkit-border-radius: $size;
  -moz-border-radius: $size;
  border-radius: $size;
}

@mixin border-radius-left($size) {
  border-top-left-radius: $size;
  -webkit-border-top-left-radius: $size;
  -moz-border-radius-topleft: $size;
  border-bottom-left-radius: $size;
  -webkit-border-bottom-left-radius: $size;
  -moz-border-radius-bottomleft: $size;
}

@mixin border-radius-right($size) {
  border-top-right-radius: $size;
  -webkit-border-top-right-radius: $size;
  -moz-border-radius-topright: $size;
  border-bottom-right-radius: $size;
  -webkit-border-bottom-right-radius: $size;
  -moz-border-radius-bottomright: $size;
}

@mixin worksans-font() {
  font-family: "Work Sans", Arial, sans-serif;
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin box-shadow($top : 0, $left : 0.5rem, $blur : 1rem, $color: rgba($black,.15), $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $color !important;
    -moz-box-shadow: inset $top $left $blur $color !important;
    box-shadow: inset $top $left $blur $color !important;
  } @else {
    -webkit-box-shadow: $top $left $blur $color !important;
    -moz-box-shadow: $top $left $blur $color !important;
    box-shadow: $top $left $blur $color !important;
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin blur($size) {
  filter: blur($size);
  -webkit-filter: blur($size);
  -ms-filter: blur($size);
}

@mixin grayscale($size) {
  filter: grayscale($size);
  -webkit-filter: grayscale($size);
  -ms-filter: grayscale($size);
}

@mixin whiteContrast() {
  filter: brightness(0) invert(1);
  -webkit-filter: brightness(0) invert(1);
}

@mixin zoom($size:1.2) {
  transform: scale($size);
  -moz-transform: scale($size);
  -o-transform: scale($size);
  -webkit-transform: scale($size);
}
